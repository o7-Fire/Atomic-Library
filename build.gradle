buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
        google()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
        dependencies {

            classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
        }
    }
}

apply plugin: "org.sonarqube"
sonarqube {
    properties {
        property "sonar.projectKey", "o7-Fire_Atomic-Library"
    }
}
allprojects {


    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
    }

}


subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: "org.sonarqube"
    sonarqube {
        properties {
            property "sonar.projectKey", "o7-Fire_Atomic-Library"
        }
    }

    group 'org.o7.Fire'
    version '4.0.3'


    ext {
        smh = {
            delete "src-gen/"
            delete "build/"
        }
    }
    ext.aproj = { String module ->
        if (findProject(module) != null) {
            return project(module)
        } else {
            return project(":Atom" + module)
        }
    }

    compileJava {
        options.fork = true
        options.incremental = true
    }

    task pre {
        smh()
    }
    dependencies {


    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        archives sourcesJar
        archives jar
    }
    tasks.withType(JavaCompile) {
        new File(projectDir, "resources/").mkdirs()
        new File(projectDir, "src/").mkdirs()
        new File(projectDir, "src-gen/").mkdirs()
        sourceSets.main.resources.srcDirs = ["resources/"]
        sourceSets.main.java.srcDirs = ["src/", "src-gen/"]
        options.annotationProcessorGeneratedSourcesDirectory = file("src-gen/")


        options.encoding = "UTF-8"

    }

}
