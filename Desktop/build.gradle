import java.nio.file.Files
import java.nio.file.StandardOpenOption

sourceCompatibility = 9
targetCompatibility = 9
repositories {
    mavenCentral()
}

dependencies {
    compileOnly aproj(":Atomic")
    compileOnly ('com.github.javaparser:javaparser-core:3.16.2'){
        because("runtime")
    }
    compileOnly (group: 'org.mongodb', name: 'mongodb-driver-sync', version: '4.1.0'){
        because("runtime")
    }
    compileOnly( group: 'org.jetbrains', name: 'annotations', version: '20.1.0'){
        because("compile")
    }
}
jar{
    dependsOn ":Atomic:jar"
    archiveFileName = "${project.archivesBaseName}.jar"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    StringBuilder sb = new StringBuilder()
    File txt = new File(project.getProjectDir(), "resources/dependencies-atomic-desktop")
    txt.delete()
    configurations.compileOnly.allDependencies.each { dep ->
        sb.append('groupId=').append(dep.group).append('\n')
        sb.append('artifactId=').append(dep.name).append('\n')
        sb.append('version=').append(dep.version).append('\n')
        sb.append('type=').append(dep.reason).append('\n\n')
    }
    ArrayList<String> done = new ArrayList<>();
    project.repositories.each {
        String url = it.url
        if (url == null) return
        if (!url.toString().startsWith("http")) return
        url = url.endsWith("/") ? url.substring(0, url.length() - 1) : url
        if (done.contains(url.toString())) return
        done.add(url.toString())
        sb.append("url=").append(url).append("\n")
    }
    txt.parentFile.mkdirs();
    Files.write(txt.toPath(), sb.toString().getBytes(), StandardOpenOption.WRITE, StandardOpenOption.CREATE)

}