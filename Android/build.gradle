
ext{
    //automatically detect latest shit
    sdkRoot = System.getenv("ANDROID_HOME")
    sdkPlatform = "${sdkRoot}/platforms"
    sdkD8 = sdkRoot+'/build-tools/'
    try{
        sdkPlatform = new File(sdkPlatform).listFiles()[new File(sdkPlatform).listFiles().length-1].getAbsolutePath()
        sdkD8 = new File(sdkD8).listFiles()[new File(sdkD8).listFiles().length-1].getAbsolutePath() + "/d8"
    }catch(ignored){}
    sdkJar = "$sdkPlatform/android.jar"
    doExec = { cmd ->
        println "Executing: \""+cmd+"\""
        println ""
        def proc = cmd.execute()
        def bout = new StringBuffer()
        proc.waitForProcessOutput(bout, bout)
        println "```\n"+bout.toString()+"\n```"
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly aproj(":Atomic")
    compileOnly files("${sdkJar}")
}
jar{
    dependsOn ":Atomic:jar"
    archiveFileName = "${project.archivesBaseName}.jar"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        //collect dependencies needed for desugaring
        def files = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File("$sdkJar")])
        def dependencies = files.collect{ "--classpath $it.path" }.join(" ")
        println "runtimeClasspath:"
        for(String e : configurations.runtimeClasspath.asList())
            println e

        println sdkD8
        //dex and desugar files - this requires d8 in your PATH
        def targetJar = new File("$buildDir/libs/${project.archivesBaseName}.jar").getAbsolutePath()
        targetJar = "'" + targetJar + "'"
        doExec("${sdkD8} $dependencies --min-api 14 $targetJar")
    }
}
sourceCompatibility = "1.7"
targetCompatibility = "1.7"